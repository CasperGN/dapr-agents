name: CI - Lint, Build and Test

on:
  push:
    branches:
      - feature/*
      - feat/*
      - bugfix/*
      - hotfix/*
      - fix/*
  pull_request:
    branches:
      - main
      - feature/*
      - release-*
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel tox
    - name: Run Autoformatter
      run: |
        tox -e ruff
        statusResult=$(git status -u --porcelain)
        if [ -z $statusResult ]
        then
            exit 0
        else
            echo "Source files are not formatted correctly. Run 'tox -e ruff' to autoformat."
            exit 1
        fi
    - name: Run Linter
      run: |
        tox -e flake8

  build:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_ver: ["3.10", "3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python_ver }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_ver }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel tox
    - name: Check Typing
      run: |
        tox -e mypy

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.13']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-mock pytest-cov
        # Create test virtual environment for isolation (needed for telemetry tests)
        python -m venv testvenv
        source testvenv/bin/activate
        pip install pytest pytest-mock pytest-cov
    
    - name: Install package for testing
      run: |
        source testvenv/bin/activate
        # Install the package in development mode
        pip install -e .
        
    - name: Run all tests with coverage
      run: |
        source testvenv/bin/activate
        # Run all tests in the tests directory with coverage
        python -m pytest tests/ -v --cov=tests --cov=dapr_agents --cov-report=term-missing --cov-report=xml

    - name: Store coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: coverage.xml
        retention-days: 14

    - name: Check coverage against baseline
      uses: irongut/CodeCoverageSummary@v1.3.0
      if: github.event_name == 'pull_request'
      with:
        filename: coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '50 75'
        minimum_coverage: 34
    
  # Manual tests have been merged into the main test job
